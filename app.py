import streamlit as st
from tools.memory import memory
from components.ui import show_results
from agents.agent_router import agent_router, agent_router_streaming
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ò–ò-–∞–≥–µ–Ω—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ç—É—Ä–æ–≤", layout="centered")
st.title("–ü–æ–∏—Å–∫–æ–≤—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –ø–æ –†–æ—Å—Å–∏–∏")

# --- Session ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "results" not in st.session_state:
    st.session_state.results = []
if "tool_logs" not in st.session_state:
    st.session_state.tool_logs = []

# --- –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ ---
if st.button("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"):
    st.session_state.messages = []
    st.session_state.results = []
    st.session_state.tool_logs = []
    memory.clear()

# --- UI —á–∞—Ç–∞ ---
chat_container = st.container()
with chat_container:
    for role, content in st.session_state.messages:
        with st.chat_message(role):
            st.markdown(content)

# --- –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_input = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å –∏–ª–∏ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

if user_input:
    st.session_state.messages.append(("user", user_input))
    st.session_state.tool_logs = []
    st.rerun()

# --- –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –≥—Ä–∞—Ñ–∞ ---
TOOL_DESCRIPTIONS = {
    "router": "[agent 'router']: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
    "chat": "[agent 'chat']: –§–æ—Ä–º–∏—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç...",
    "check_search_params": "[agent 'check_search_params']: –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞...",
    "search": "[agent 'search']: –û—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤...",
    "default": "[agent 'default']: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
}

def log_tool_status(tool_name):
    desc = TOOL_DESCRIPTIONS.get(tool_name, TOOL_DESCRIPTIONS["default"])
    st.session_state.tool_logs.append((tool_name, desc))
    return desc

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ ---
if st.session_state.messages and st.session_state.messages[-1][0] == "user":
    last_user_input = st.session_state.messages[-1][1]
    st.session_state.messages.append(("assistant", ""))  # –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ –æ—Ç–≤–µ—Ç

    # –†–∞–∑–º–µ—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    msg_placeholder = st.empty()
    status_placeholder = st.empty()

    full_response = ""

    try:
        for update in agent_router_streaming(last_user_input):
            # print(f">> UI STREAM UPDATE: {update}")

            # üîç –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–¥—ã
            node_name = list(update.keys())[0]  # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —É–∑–ª–∞
            print(f">> node_name: {node_name}")
            status = log_tool_status(node_name)
            status_placeholder.markdown(status)

            # ‚è±Ô∏è –¥–∞–µ–º UI –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            time.sleep(0.5)

            # üì¶ –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            output = update.get(node_name, {})
            if "result" in output and output["result"]:
                full_response = output["result"]
                msg_placeholder.chat_message("assistant").markdown(full_response)

    except Exception as e:
        full_response = f"–û—à–∏–±–∫–∞: {str(e)}"
        msg_placeholder.chat_message("assistant").markdown(full_response)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    st.session_state.messages[-1] = ("assistant", full_response)
    st.rerun()


# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ---
show_results(st.session_state.results)
